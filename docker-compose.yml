version: '3.7'

services:
  db:
    image: postgres:alpine3.14
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - APP_DB_USER=$APP_DB_USER
      - APP_DB_PASS=$APP_DB_PASS
      - APP_DB_NAME=$APP_DB_NAME
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - app-network
  backend:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: backend
    container_name: backend
    restart: unless-stopped
    env_file: .env
    environment:
      - APP_DB_USER=$APP_DB_USER
      - APP_DB_PASS=$APP_DB_PASS
      - DB_HOSTNAME=db
      - POSTGRES_PORT=$POSTGRES_PORT
      - APP_DB_NAME=$APP_DB_NAME
      - API_PORT=$API_PORT
    ports:
      - ${API_PORT}:${API_PORT}
    volumes:
      - .:/home/node/app
      - node_modules:/home/node/app/node_modules
    networks:
      - app-network
    command: ./wait-for.sh db:${POSTGRES_PORT} -- nodemon index.js
networks:
  app-network:
    driver: bridge
volumes:
  dbdata:
  node_modules:
